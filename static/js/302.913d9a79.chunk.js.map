{"version":3,"file":"static/js/302.913d9a79.chunk.js","mappings":"6TA4OA,UArOiB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KACZC,GAAQC,EAAAA,EAAAA,KACNC,GAAQC,EAAAA,EAAAA,MAARD,IACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,UAAQ,kBAAMC,IAAM,IAAIC,KAAKP,GAArB,GAA4B,CAACA,IACnDQ,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,GAAchB,EAAMiB,YAAYC,KAAK,OAEhDC,EAAcb,EAAYa,cAE1BC,EAAad,EAAYe,QAAQ,SAASnB,MAG1CoB,EAAY,CAChBC,OAAO,aAAD,OAAwB,SAATxB,EAAkB,4BAA8B,aAErEyB,SAAU,SACVC,QAAS,OACTC,WAAY,WACZC,cAAe,SACfC,UAAW,aACXC,eAAgB,aAChBC,QAAS,cACTC,QAAkB,SAAThC,EAAkB,UAAY,OACvCiC,WAAY,iBACZC,OAAQ,WAGJC,EAAgB,CACpBC,MAAgB,SAATpC,EAAkB,OAAS,UAClCqC,SAAU,OACVR,UAAW,aACXS,WAAY,oBACZC,UAAW,SACXC,WAAY,IACZC,YAAa,OACbC,WAAY,OACZC,cAAe,aAoIjB,OArBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,+GAEQlC,GACrBmC,EAAAA,EAAAA,IAAS,CACPC,MAAO,KAAOxC,EAAYyC,GAAK,GAC/BC,KAAM1C,EAAY2C,GAAK,MALZ,OASqB,eAP9BC,EAFS,QASFC,KAAKC,gBACVvC,EAAQqC,EAASG,QAAQxC,MAC/BC,EAASD,IAXI,gDAcfyC,QAAQC,IAAR,MAde,yDAAH,qDAkBhBX,GACD,GAAE,CAACtC,EAAaI,KAEf,SAAC,IAAD,CAEE8C,GAAI,CACFC,OAAQ,OACRhC,QAAS,OACTE,cAAe,SACf+B,SAAU,QANd,UASE,UAAC,IAAD,CAAKF,GAAI,CAAEG,KAAM,GAAjB,WACE,UAAC,IAAD,CACElC,QAAS,OACTiC,SAAU,OACVE,EAAG,CAAEC,GAAI,OAAQC,GAAI,aACrBjC,eAAgB,gBAChBE,QAAkB,SAAThC,EAAkB,OAAS,UACpCgE,aAAc,MACdxC,OAAM,oBAAwB,SAATxB,EACjB,4BACA,6BAEJiE,GAAI,OAXN,WAaE,SAAC,IAAD,CAAYC,MAAM,SAAST,GAAItB,EAA/B,SACGnB,EAAW,IAAM,SAEpB,SAAC,IAAD,CAAYkD,MAAM,SAAST,GAAItB,EAA/B,SACGnB,EAAW,IAAM,SAEpB,SAAC,IAAD,CAAYkD,MAAM,SAAST,GAAItB,EAA/B,SACGnB,EAAW,IAAM,SAEpB,SAAC,IAAD,CAAYkD,MAAM,SAAST,GAAItB,EAA/B,SACGnB,EAAW,IAAM,SAEpB,SAAC,IAAD,CAAYkD,MAAM,SAAST,GAAItB,EAA/B,SACGnB,EAAW,IAAM,SAEpB,SAAC,IAAD,CAAYkD,MAAM,SAAST,IAAE,kBAAMtB,GAAN,IAAqBC,MAAO,YAAzD,SACGpB,EAAW,IAAM,SAEpB,SAAC,IAAD,CAAYkD,MAAM,SAAST,IAAE,kBAAMtB,GAAN,IAAqBC,MAAO,YAAzD,SACGpB,EAAW,IAAM,YAGtB,SAAC,IAAD,CACEU,QAAQ,OACRyC,oBAAoB,iBACpB,oBAAkB,iBAHpB,SAlKiB,WASrB,IARA,IAAMC,EAAW,GACXC,GAAUhD,EA5CK,EA4CyB,GAAK,EAO1CiD,EAAI,EAAGA,EAAID,EAAQC,IAC1BF,EAASG,MAAK,SAAC,IAAD,CAAwBd,GAAIlC,GAA5B,gBAAmB+C,KAKnC,IAFA,IAAME,EAAiB,GAAMH,EAASjD,GAAe,EAb1B,WAelBkD,GACP,IAAMG,EAAOlE,EAAYkE,KAAKH,GACxBI,EAAejE,MAAQkE,OAAOF,EAAM,OAEpCG,EAhBgB,SAAAH,GACtB,OAAO3D,EAAM+D,QAAO,SAAAC,GAClB,OAAOrE,IAAMqE,EAAKL,MAAME,OAAOF,EAAM,MACtC,GACF,CAYsBM,CAAgBN,GACrCL,EAASG,MACP,UAAC,IAAD,CAEES,QAAS,kBACP3E,EAAS,sBAAD,OAAuBoE,EAAKQ,OAAO,eADpC,EAGTxB,IAAE,kBACGlC,GADH,IAEA2D,UAAU,GAAD,OAzCC,+MAyCD,iCACTxB,OAAQ,CACNI,GAAG,0BAAD,QAA6B1C,EAAciD,EAASG,GAAkB,EAAtE,KACFT,GAAG,0BAAD,QAA6B3C,EAAciD,EAASG,GAAkB,EAAtE,KACFW,GAAG,0BAAD,QAA6B/D,EAAciD,EAASG,GAAkB,EAAtE,MAEJ,SAAU,CACRY,UAAW,gBAdjB,WAkBE,SAAC,IAAD,CACE3B,IAAE,kBACGtB,GACCuC,GAAgB,CAClBtC,MAAO,OACPL,QAAS,UACTC,QAAS,UACTgC,aAAc,QAGlBqB,UAAW,IACXpB,GAAI,OAXN,SAaGK,IAGFM,EAAaU,KAAI,SAAAR,GAAI,OACpB,SAAC,IAAD,CAEErB,GAAI,CACF8B,MAAO,MACP1B,EAAG,WACHI,GAAI,MACJpC,UAAW,aACX2D,WAAY,SACZxD,QACoB,SAAlB8C,EAAKW,SACD,UACkB,WAAlBX,EAAKW,SACH,UACA,UACRrD,MACoB,SAAlB0C,EAAKW,SACD,UACkB,WAAlBX,EAAKW,SACH,UACA,UACRhE,SAAU,SACVuC,aAAc,MACd0B,aAAc,YAEhBL,UAAW,IAxBb,SA0BGP,EAAKa,OAzBDb,EAAKc,IAFQ,MAlCxB,cACctB,IAtBS,EAelBA,EAAI,EAAGA,GAAKlD,EAAakD,IAAM,EAA/BA,GAyET,IAAK,IAAIA,EAAI,EAAGA,EAAIE,EAAgBF,IAClCF,EAASG,MAAK,SAAC,IAAD,CAAsCd,GAAIlC,GAA1C,gBAAmBH,EAAckD,KAGjD,OAAOF,CACR,CA2EQyB,SAlDA/E,EAAMgF,OAuDhB,C","sources":["components/calendar/calendar.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { Box, Typography, createTheme, useMediaQuery } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { getTasks } from 'redux/tasks/operations';\nimport dayjs from 'dayjs';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nconst Calendar = ({ mode }) => {\n  const theme = createTheme();\n  const { day } = useParams();\n  const navigate = useNavigate();\n  const currentDate = useMemo(() => dayjs(new Date(day)), [day]);\n  const dispatch = useDispatch();\n  const [tasks, setTasks] = useState([]);\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n\n  const daysInMonth = currentDate.daysInMonth();\n\n  const monthStart = currentDate.startOf('month').day();\n  const firstDayOfWeek = 1;\n\n  const cellStyle = {\n    border: `1px solid ${mode !== 'dark' ? 'rgba(255, 255, 255, 0.15)' : '#DCE3E5CC'\n      }`,\n    overflow: 'hidden',\n    display: 'flex',\n    alignItems: 'flex-end',\n    flexDirection: 'column',\n    boxSizing: 'border-box',\n    justifyContent: 'flex-start',\n    padding: '8px 4px 2px',\n    bgcolor: mode !== 'dark' ? '#21222C' : '#FFF',\n    transition: 'transform 0.3s',\n    cursor: 'pointer',\n  };\n\n  const cellTextStyle = {\n    color: mode !== 'dark' ? '#FFF' : '#343434',\n    fontSize: '16px',\n    boxSizing: 'border-box',\n    fontFamily: 'Inter, sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 700,\n    marginRight: '10px',\n    lineHeight: '18px',\n    textTransform: 'uppercase',\n  };\n\n  const scaleAnimation = `\n    @keyframes scaleAnimation {\n      0% {\n        transform: scale(1);\n      }\n      50% {\n        transform: scale(1.1);\n      }\n      100% {\n        transform: scale(1.2);\n      }\n    }\n  `;\n  const renderCalendar = () => {\n    const calendar = [];\n    const offset = (monthStart - firstDayOfWeek + 7) % 7;\n    const getTasksForDate = date => {\n      return tasks.filter(task => {\n        return dayjs(task.date).isSame(date, 'day');\n      });\n    };\n\n    for (let i = 0; i < offset; i++) {\n      calendar.push(<Box key={`empty-${i}`} sx={cellStyle} />);\n    }\n\n    const remainingCells = 7 - ((offset + daysInMonth) % 7);\n\n    for (let i = 1; i <= daysInMonth; i++) {\n      const date = currentDate.date(i);\n      const isCurrentDay = dayjs().isSame(date, 'day');\n\n      const tasksForDate = getTasksForDate(date);\n      calendar.push(\n        <Box\n          key={`day-${i}`}\n          onClick={() =>\n            navigate(`/main/calendar/day/${date.format('YYYY-MM-DD')}`)\n          }\n          sx={{\n            ...cellStyle,\n            animation: `${scaleAnimation} 1s linear infinite alternate`,\n            height: {\n              xs: `calc((100vh - 248px) / ${(daysInMonth + offset + remainingCells) / 7})`,\n              md: `calc((100vh - 280px) / ${(daysInMonth + offset + remainingCells) / 7})`,\n              lg: `calc((100vh - 290px) / ${(daysInMonth + offset + remainingCells) / 7})`,\n            },\n            ':hover': {\n              transform: 'scale(1.1)',\n            },\n          }}\n        >\n          <Typography\n            sx={{\n              ...cellTextStyle,\n              ...(isCurrentDay && {\n                color: '#FFF',\n                padding: '4px 9px',\n                bgcolor: '#3E85F3',\n                borderRadius: '8px',\n              }),\n            }}\n            component={'p'}\n            mb={'12px'}\n          >\n            {i}\n          </Typography>\n\n          {tasksForDate.map(task => (\n            <Typography\n              key={task._id}\n              sx={{\n                width: '90%',\n                p: '4px 10px',\n                mb: '5px',\n                boxSizing: 'border-box',\n                whiteSpace: 'nowrap',\n                bgcolor:\n                  task.priority === 'high'\n                    ? '#FFD2DD'\n                    : task.priority === 'medium'\n                      ? '#FCF0D4'\n                      : '#CEEEFD',\n                color:\n                  task.priority === 'high'\n                    ? '#EA3D65'\n                    : task.priority === 'medium'\n                      ? '#F3B249'\n                      : '#3E85F3',\n                overflow: 'hidden',\n                borderRadius: '8px',\n                textOverflow: 'ellipsis',\n              }}\n              component={'p'}\n            >\n              {task.title}\n            </Typography>\n          ))}\n        </Box>\n      );\n    }\n    for (let i = 0; i < remainingCells; i++) {\n      calendar.push(<Box key={`empty-${daysInMonth + i}`} sx={cellStyle} />);\n    }\n\n    return calendar;\n  };\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await dispatch(\n          getTasks({\n            month: '0' + (currentDate.$M + 1),\n            year: currentDate.$y + '',\n          })\n        );\n\n        if (response.meta.requestStatus === 'fulfilled') {\n          const tasks = response.payload.tasks;\n          setTasks(tasks);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchTasks();\n  }, [currentDate, dispatch]);\n  return (\n    <Box\n      key={tasks.length}\n      sx={{\n        height: 'auto',\n        display: 'flex',\n        flexDirection: 'column',\n        maxWidth: '100%',\n      }}\n    >\n      <Box sx={{ flex: 1 }}>\n        <Box\n          display={'flex'}\n          maxWidth={'100%'}\n          p={{ xs: '16px', md: '14px 60px' }}\n          justifyContent={'space-between'}\n          bgcolor={mode === 'dark' ? '#FFF' : '#21222C'}\n          borderRadius={'8px'}\n          border={`1px solid ${mode === 'dark'\n            ? 'rgba(220, 227, 229, 0.80)'\n            : 'rgba(255, 255, 255, 0.15)'\n            }`}\n          mb={'15px'}\n        >\n          <Typography align=\"center\" sx={cellTextStyle}>\n            {isMobile ? 'M' : 'Mon'}\n          </Typography>\n          <Typography align=\"center\" sx={cellTextStyle}>\n            {isMobile ? 'T' : 'Tue'}\n          </Typography>\n          <Typography align=\"center\" sx={cellTextStyle}>\n            {isMobile ? 'W' : 'Wed'}\n          </Typography>\n          <Typography align=\"center\" sx={cellTextStyle}>\n            {isMobile ? 'T' : 'Thu'}\n          </Typography>\n          <Typography align=\"center\" sx={cellTextStyle}>\n            {isMobile ? 'F' : 'Fri'}\n          </Typography>\n          <Typography align=\"center\" sx={{...cellTextStyle, color: '#3E85F3'}}>\n            {isMobile ? 'S' : 'Sat'}\n          </Typography>\n          <Typography align=\"center\" sx={{...cellTextStyle, color: '#3E85F3'}}>\n            {isMobile ? 'S' : 'Sun'}\n          </Typography>\n        </Box>\n        <Box\n          display=\"grid\"\n          gridTemplateColumns=\"repeat(7, 1fr)\"\n          gridTemplate-rows=\"repeat(6, 1fr)\"\n          \n        >\n          {renderCalendar()}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Calendar;\n"],"names":["mode","theme","createTheme","day","useParams","navigate","useNavigate","currentDate","useMemo","dayjs","Date","dispatch","useDispatch","useState","tasks","setTasks","isMobile","useMediaQuery","breakpoints","down","daysInMonth","monthStart","startOf","cellStyle","border","overflow","display","alignItems","flexDirection","boxSizing","justifyContent","padding","bgcolor","transition","cursor","cellTextStyle","color","fontSize","fontFamily","fontStyle","fontWeight","marginRight","lineHeight","textTransform","useEffect","fetchTasks","getTasks","month","$M","year","$y","response","meta","requestStatus","payload","console","log","sx","height","maxWidth","flex","p","xs","md","borderRadius","mb","align","gridTemplateColumns","calendar","offset","i","push","remainingCells","date","isCurrentDay","isSame","tasksForDate","filter","task","getTasksForDate","onClick","format","animation","lg","transform","component","map","width","whiteSpace","priority","textOverflow","title","_id","renderCalendar","length"],"sourceRoot":""}