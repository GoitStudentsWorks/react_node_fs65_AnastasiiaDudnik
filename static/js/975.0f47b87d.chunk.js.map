{"version":3,"file":"static/js/975.0f47b87d.chunk.js","mappings":"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","sources":["components/variables/colors.jsx","pages/statisticsPage/statisticsPage.styled.jsx","components/statisticsComponentsChart/statisticsChart/statisticsChart.jsx","components/spinner/spinner.styled.jsx","components/spinner/spinner.jsx","components/statisticsComponentsChart/statisticsDateBar/periodPag.jsx","components/statisticsComponentsChart/statisticsDateBar/calendarBar.jsx","components/statisticsComponentsChart/sectionStatictics/sectionStatistics.jsx","pages/statisticsPage/statisticsPage.jsx"],"sourcesContent":["const colorsLight = {\n    /* text */\n    mainTextColor: '#111111',\n    secondaryTextColor: '#616161',\n    accentTextColor: '#3e85f3',\n    activeSelectionColor: '#e3f3ff',\n    btnTextColor: '#ffffff',\n    inactiveBtnTextColor: '#84828a',\n    calendarDateColor: '#343434',\n    calendarCellColor: '#FFFFFF',\n    accentColor: '#3e85f3',\n    hoverColor: '#7aaff3',\n    columnBackGroundColor: '#FFFFFF',\n    modalShadow: '#1111111A',\n\n    /* pop-up modal window */\n    popUpBackGroundColor: '#FFFFFF',\n    popUpInputTextColor: '#616161',\n    popUpLabelTextColor: '#343434CC',\n    popUpInputBgrColor: '#F6F6F6',\n\n    /* backgroung */\n    mainBackgroundColor: '#ffffff',\n    authBackgroundColor: '#dcebf7',\n    outletBackgroundColor: '#f7f6f9',\n    sidebarBackgroundColor: '#ffffff',\n    accentBackgroundColor: '#3e85f3',\n    modalBorder: '#DCE3E5CC',\n\n    /* tasks */\n    taskHighColor: '#ea3d65',\n    taskMedColor: '#f3b249',\n    taskLowColor: '#72c2f8',\n    taskCardColor: '#dce3e5cc',\n    inputFieldColor: '#f6f6f6',\n    taskCancelColor: '#efefef',\n    inputFieldTextColor: '#616161',\n    iconColor: '#3E85F3',\n\n    /* calendar */\n    priorityHighColor: '#ffd2dd',\n    priorityMedColor: '#fcf0d4',\n    priorityLowColor: '#ceeefd',\n\n    /* other */\n    scrollbarColor: '#e7e5e5',\n    scrollbarBackgroundColor: '#f2f2f2',\n    frameBorderColor: '#e1e7e9',\n    navTitleColor: '#7E7D82',\n    strPgBackgroundColor: '#FFFFFF',\n};\n\nconst colorsDark = {\n    mainTextColor: '#ffffff',\n    secondaryTextColor: ' #FFFFFF',\n    accentTextColor: '#ffffff',\n    btnTextColor: '#ffffff',\n    inactiveBtnTextColor: '#EFEFEF',\n    activeSelectionColor: '#3e85f3',\n    calendarDateColor: '#ffffff',\n    calendarCellColor: '#21222C',\n    accentColor: '#3e85f3',\n    labelColor: '#FAFAFA4D',\n    iconColor: '#FFFFFF',\n    hoverColor: '#7aaff3',\n    columnBackGroundColor: '#21222C',\n    modalShadow: '#1111111A',\n\n    /* pop-up modal window */\n    popUpBackGroundColor: '#171820',\n    popUpInputTextColor: '#FFFFFF',\n    popUpLabelTextColor: '#FFFFFF',\n    popUpInputBgrColor: '#171820',\n    popUpCancelBtnColor: '#EFEFEF',\n    popUpAddBtnColor: '#3E85F3',\n\n    /* backgroung */\n    mainBackgroundColor: '#21222c',\n    authBackgroundColor: '#dcebf7',\n    outletBackgroundColor: '#171820',\n    sidebarBackgroundColor: '#13151a',\n    accentBackgroundColor: '#3e85f3',\n    modalBorder: '#FFFFFF26',\n\n    /* tasks */\n    taskHighColor: '#ea3d65',\n    taskMedColor: '#f3b249',\n    taskLowColor: '#72c2f8',\n    taskCardColor: '#171820',\n    inputFieldColor: '#171820',\n    taskCancelColor: '#efefef',\n    inputFieldTextColor: '#FFFFFF',\n    inputBorderColor: '#FFFFFF26',\n    placeholderColor: '#DCE3E5',\n    /* calendar */\n    priorityHighColor: '#ffd2dd',\n    priorityMedColor: '#fcf0d4',\n    priorityLowColor: '#ceeefd',\n    /* other */\n    scrollbarColor: '#2d3037',\n    scrollbarBackgroundColor: '#21222c',\n    frameBorderColor: '#42434c',\n};\n\nexport { colorsLight, colorsDark };","import styled from 'styled-components';\n\nexport const StatisticsContainer = styled.section`\n  position: relative;\n  border-radius: 16px;\n  @media screen and (max-width: 374px) {\n    max-width: 335px;\n    padding-top: 28px;\n    padding-bottom: 135px;\n    padding-left: 14px;\n    padding-right: 14px;\n  }\n\n  @media screen and (min-width: 375px) and (max-width: 768px) {\n    width: 335px;\n    border-radius: 16px;\n    /* padding-top: 28px; */\n    padding-bottom: 135px;\n    padding-left: 14px;\n    padding-right: 14px;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    width: 704px;\n    /* height: 100px; */\n    /* padding-top: 140px; */\n    padding-bottom: 224px;\n    padding-left: 32px;\n    padding-right: 32px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 1087px;\n    /* padding-top: 142px; */\n    padding-bottom: 104px;\n    padding-left: 113px;\n    padding-right: 114px;\n  }\n`;\n\nexport const ChartContainer = styled.div`\n  /* position: relative; */\n  margin-top: auto;\n\n  border-radius: 29px;\n  border: 0.8px solid #e3f3ff;\n  @media screen and (max-width: 375px) {\n    max-width: 307px;\n  }\n\n  @media screen and (min-width: 376px) and (max-width: 768px) {\n    width: 307px;\n    height: 413px;\n    padding-top: 40px;\n    padding-bottom: 40px;\n    padding-left: 14px;\n    padding-right: 14px;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    width: 640px;\n    height: 424px;\n    padding-top: 32px;\n    padding-bottom: 32px;\n    padding-left: 32px;\n    padding-right: 32px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 860px;\n    height: 440px;\n    padding: 40px;\n  }\n`;\n\nexport const HeadContainer = styled.section`\n  position: absolute;\n  top: 12%;\n  left: 5%;\n  position: relative;\n  display: flex;\n  width: 70%;\n  justify-content: space-between;\n  align-items: baseline;\n  /* padding-bottom: 38px; */\n\n  @media screen and (min-width: 375px) and (max-width: 768px) {\n    flex-wrap: wrap;\n    gap: 20px;\n    padding-bottom: 20px;\n  }\n\n  @media screen and (min-width: 768px) {\n    /* padding-left: 54px; */\n    padding-right: 54px;\n  }\n`;\n\nexport const PeriodTime = styled.div`\n  display: flex;\n  gap: 14px;\n`;\n\nexport const Period = styled.span`\n  color: #343434;\n  font-size: 16px;\n  color: ${props => props.theme.text_3};\n  font-style: normal;\n  font-weight: 400;\n  line-height: 18px;\n`;\n","import React from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  LabelList,\n  ResponsiveContainer,\n  Label,\n} from 'recharts';\n\nexport const StatisticsChart = ({ data, mode }) => {\n  const percentagesLabel = props => {\n    const { x, y, width, value } = props;\n    const radius = 10;\n    const labelY = y - (y === 0 ? radius : 0);\n\n    return mode === 'dark' ? (\n      <svg>\n        <text\n          x={x + 2 + width / 2}\n          y={labelY}\n          fill=\"rgba(52, 52, 52, 1)\"\n          fontSize={16}\n          fontWeight={500}\n          textAnchor=\"middle\"\n          dominantBaseline=\"middle\"\n        >\n          {`${value}%`}\n        </text>\n      </svg>\n    ) : (\n      <svg>\n        <text\n          x={x + 2 + width / 2}\n          y={labelY}\n          fill=\"rgba(255, 255, 255, 1)\"\n          fontSize={16}\n          fontWeight={500}\n          textAnchor=\"middle\"\n          dominantBaseline=\"middle\"\n        >\n          {`${Math.round(value)}%`}\n        </text>\n      </svg>\n    );\n  };\n\n  const {\n    todoByDayPercentage,\n    inprogressByDayPercentage,\n    doneByDayPercentage,\n    todoByMonthPercentage,\n    inprogressByMonthPercentage,\n    doneByMonthPercentage,\n  } = data;\n\n  const columns = [\n    {\n      name: 'To Do',\n      byDay: `${todoByDayPercentage}`,\n      byMonth: `${todoByMonthPercentage}`,\n    },\n\n    {\n      name: 'In Progress',\n      byDay: `${inprogressByDayPercentage}`,\n      byMonth: `${inprogressByMonthPercentage}`,\n    },\n    {\n      name: 'Done',\n      byDay: `${doneByDayPercentage}`,\n      byMonth: `${doneByMonthPercentage}`,\n    },\n  ];\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart\n        data={columns}\n        margin={{\n          top: 45,\n          right: 10,\n          left: 10,\n          bottom: 10,\n        }}\n        barCategoryGap={75}\n        barGap={10}\n        barSize={27}\n      >\n        <defs>\n          <linearGradient id=\"colorM\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"0%\" stopColor=\"rgb(255, 210, 221)\" stopOpacity={0} />\n            <stop\n              offset=\"100%\"\n              stopColor=\"rgb(255, 210, 221)\"\n              stopOpacity={1}\n            />\n          </linearGradient>\n        </defs>\n        <defs>\n          <linearGradient id=\"colorD\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"0%\" stopColor=\"rgb(62, 133, 243)\" stopOpacity={0} />\n            <stop offset=\"100%\" stopColor=\"rgb(62, 133, 243)\" stopOpacity={1} />\n          </linearGradient>\n        </defs>\n        <CartesianGrid x={100} stroke=\"#E3F3FF\" vertical={false} />\n        <XAxis\n          dataKey=\"name\"\n          tickSize={0}\n          tickMargin={16}\n          axisLine={false}\n          fontSize={14}\n          fontWeight={400}\n          stroke={mode === 'dark' ? 'rgba(52, 52, 52, 1)' : '#ffffff'}\n        />\n        <YAxis\n          domain={[0, 100]}\n          position=\"left\"\n          axisLine={false}\n          tickLine={false}\n          tickCount={6}\n          tickMargin={20}\n          fontSize={14}\n          stroke={mode === 'dark' ? 'rgba(52, 52, 52, 1)' : '#ffffff'}\n        >\n          <Label\n            position=\"top\"\n            dy={-28}\n            fontSize={14}\n            fontWeight={500}\n            fill={mode === 'dark' ? 'rgba(52, 52, 52, 1)' : '#ffffff'}\n          >\n            Tasks\n          </Label>\n        </YAxis>\n\n        <Bar\n          name=\"By Day\"\n          dataKey=\"byDay\"\n          fill=\"url(#colorM)\"\n          barSize={27}\n          radius={10}\n          minPointSize={10}\n        >\n          <LabelList\n            position=\"top\"\n            fontSize={6}\n            fontWeight={500}\n            content={percentagesLabel}\n            theme={'#f1bfbf'}\n          />\n        </Bar>\n        <Bar\n          name=\"By Month\"\n          dataKey=\"byMonth\"\n          fill=\"url(#colorD)\"\n          barSize={27}\n          radius={10}\n          minPointSize={10}\n        >\n          <LabelList\n            position=\"top\"\n            fontSize={16}\n            fontWeight={500}\n            content={percentagesLabel}\n          />\n        </Bar>\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SpinnerStyled = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { SpinnerStyled } from './spinner.styled';\nimport { colorsLight } from '../../components/variables/colors';\n\nexport default function Spinner() {\n  return (\n    <SpinnerStyled>\n      <RotatingLines\n        strokeColor={`${colorsLight.accentBackgroundColor}`}\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"150\"\n        visible={true}\n      />\n    </SpinnerStyled>\n  );\n}\n","import {   Typography } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport { DateCalendar } from '@mui/x-date-pickers';\nimport { colorsLight } from 'components/variables/colors';\nimport moment from 'moment';\nimport { useEffect, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getTasksStatistics } from 'redux/tasks/operations';\nconst day = new Date();\n\nexport const PeriodPag = ({ mode, type, data }) => {\n  const [calendar, setCalendar] = useState(false);\n  const calendarRef = useRef(null);\n  const [date, setDate] = useState('');\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const today = moment(day, 'YYYY-MM-DD');\n    const currentDate = today.format('DD MMMM YYYY');\n    setDate(currentDate);\n    const handleClickOutside = event => {\n      if (calendarRef.current && !calendarRef.current.contains(event.target)) {\n        setCalendar(false);\n      }\n    };\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [data]);\n\n  const handleDatePicker = date => {\n    const today = moment(date.$d, 'YYYY-MM-DD');\n    const currentDate = today.format('DD MMMM YYYY');\n    dispatch(getTasksStatistics(today.format('YYYY-MM-DD')));\n    setDate(currentDate);\n    setCalendar(false);\n  };\n\n  return (\n    <Box sx={{ display: 'flex' }} ref={calendarRef}>\n      <Box\n        sx={{\n          width: '131px',\n          backgroundColor: colorsLight.accentColor,\n          textAlign: 'center',\n          color: '#fff',\n          mt: 'auto',\n          mb: 'auto',\n          pt: '8px',\n          pb: '8px',\n          borderRadius: '8px',\n        }}\n      >\n        <Typography\n          sx={{\n            color: '#fff',\n            fontSize: '16px',\n            fontWeight: 700,\n            lineHeight: '18px',\n            textTransform: 'uppercase',\n            textAlign: 'center',\n            position: 'reletive',\n            cursor: 'pointer',\n          }}\n          onClick={() => setCalendar(!calendar)}\n        >\n          {type === 'month' ? date.slice(3, date.length) : date}\n        </Typography>\n      </Box>\n      <DateCalendar\n        sx={{\n          display: calendar ? 'block' : 'none',\n          position: 'absolute',\n          zIndex: 100,\n          backgroundColor: colorsLight.accentColor,\n          top: '40px',\n          borderRadius: '8px',\n          color: '#fff',\n          '& *': { color: '#fff' },\n          '& * .css-x2lq26-MuiButtonBase-root-MuiPickersDay-root:hover': {\n            backgroundColor: '#00a3ff',\n          },\n        }}\n        onChange={handleDatePicker}\n      />\n{/*       <Box\n        sx={{\n          borderRadius: '8px',\n          border:\n            mode === 'dark'\n              ? '1px solid rgba(220,227,229, 0.80)'\n              : '1px solid #FFFFFF26',\n          ml: '8px',\n        }}\n      >\n        <Button\n          sx={{\n            minWidth: '38px',\n            backgroundColor: mode === 'dark' ? '#fff' : '#21222C',\n            textAlign: 'center',\n            borderTopLeftRadius: '8px',\n            borderBottomLeftRadius: '8px',\n            borderBottomRightRadius: '0px',\n            borderTopRightRadius: '0px',\n            padding: '4px 0px',\n          }}\n        >\n          <SvgIcon style={{ stroke: mode === 'dark' ? '#000' : '#fff' }}>\n            <use href={`${Sprite}#chevron-left`} />\n          </SvgIcon>\n        </Button>\n        <Button\n          sx={{\n            minWidth: '38px',\n            backgroundColor: mode === 'dark' ? '#fff' : '#21222C',\n            textAlign: 'center',\n            borderTopLeftRadius: '0px',\n            borderBottomLeftRadius: '0px',\n            borderBottomRightRadius: '8px',\n            borderTopRightRadius: '8px',\n            borderLeft:\n              mode === 'dark'\n                ? '1px solid rgba(220,227,229, 0.80)'\n                : '1px solid #FFFFFF26',\n            padding: '4px 0px',\n          }}\n        >\n          <SvgIcon style={{ stroke: mode === 'dark' ? '#000' : '#fff' }}>\n            <use href={`${Sprite}#chevron-right`} />\n          </SvgIcon>\n        </Button>\n      </Box>  */}\n    </Box>\n  );\n};\n","import Box from '@mui/material/Box';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { useState } from 'react';\nimport { PeriodPag } from './periodPag';\n\nconst CalendarBar = ({ mode, data }) => {\n  const type = useState('month');\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginBottom: { xs: '24px', lg: '32px' },\n      }}\n    >\n      <LocalizationProvider dateAdapter={AdapterDayjs}>\n        <PeriodPag mode={mode} type={type} data={data} />\n      </LocalizationProvider>\n    </Box>\n  );\n};\n\nexport default CalendarBar;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { StatisticsChart } from '../statisticsChart/statisticsChart';\nimport Spinner from 'components/spinner/spinner';\nimport { BsFillCircleFill } from 'react-icons/bs';\nimport moment from 'moment';\nimport {\n  HeadContainer,\n  PeriodTime,\n  Period,\n  ChartContainer,\n} from '../../../pages/statisticsPage/statisticsPage.styled';\nimport CalendarBar from '../statisticsDateBar/calendarBar';\nimport { getTasksStatistics } from 'redux/tasks/operations';\nimport { selectTasksStatistics } from 'redux/tasks/selectors';\n\nexport const SectionStatistics = ({ mode }) => {\n  const currentDate = moment();\n  const data = useSelector(selectTasksStatistics);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getTasksStatistics(currentDate.format('YYYY-MM-DD')));\n    // eslint-disable-next-line\n  }, []);\n  return (\n    <>\n      <HeadContainer>\n        <CalendarBar mode={mode} data={data} />\n\n        <PeriodTime>\n          <Period\n            style={{\n              color: mode === 'dark' ? '#000' : '#fff',\n            }}\n          >\n            <BsFillCircleFill fill=\"#FFD2DD\" size={8} /> By Day\n          </Period>\n          <Period\n            style={{\n              color: mode === 'dark' ? '#000' : '#fff',\n            }}\n          >\n            <BsFillCircleFill fill=\"#3E85F3\" size={8} /> By Month\n          </Period>\n        </PeriodTime>\n      </HeadContainer>\n      <ChartContainer>\n        {!data ? <Spinner /> : <StatisticsChart data={data} mode={mode} />}\n      </ChartContainer>\n    </>\n  );\n};\n","// import Box from '@mui/material/Box';\n// import Typography from '@mui/material/Typography';\n\nimport { StatisticsContainer } from './statisticsPage.styled';\n\nimport { SectionStatistics } from '../../components/statisticsComponentsChart/sectionStatictics/sectionStatistics';\n\nconst Statistics = ({ mode }) => {\n  // console.log({ mode });\n  return (\n    <StatisticsContainer>\n      <SectionStatistics mode={mode} />\n    </StatisticsContainer>\n  );\n};\n\nexport default Statistics;\n\n// import React from 'react';\n// import { StatisticsContainer } from 'pages/StatisticsPage/StatisticsPage.styled';\n\n// import { SectionStatistics } from 'components/StatisticsPageComponents/SectionStatistics/SectionStatistics';\n\n// export default function StatisticsPage() {\n//   return (\n//     <StatisticsContainer>\n//       <SectionStatistics />\n//     </StatisticsContainer>\n//   );\n// }\n"],"names":["colorsLight","mainTextColor","secondaryTextColor","accentTextColor","activeSelectionColor","btnTextColor","inactiveBtnTextColor","calendarDateColor","calendarCellColor","accentColor","hoverColor","columnBackGroundColor","modalShadow","popUpBackGroundColor","popUpInputTextColor","popUpLabelTextColor","popUpInputBgrColor","mainBackgroundColor","authBackgroundColor","outletBackgroundColor","sidebarBackgroundColor","accentBackgroundColor","modalBorder","taskHighColor","taskMedColor","taskLowColor","taskCardColor","inputFieldColor","taskCancelColor","inputFieldTextColor","iconColor","priorityHighColor","priorityMedColor","priorityLowColor","scrollbarColor","scrollbarBackgroundColor","frameBorderColor","navTitleColor","strPgBackgroundColor","colorsDark","labelColor","popUpCancelBtnColor","popUpAddBtnColor","inputBorderColor","placeholderColor","StatisticsContainer","styled","ChartContainer","HeadContainer","PeriodTime","Period","props","theme","text_3","StatisticsChart","data","mode","percentagesLabel","x","y","width","value","labelY","fill","fontSize","fontWeight","textAnchor","dominantBaseline","Math","round","todoByDayPercentage","inprogressByDayPercentage","doneByDayPercentage","todoByMonthPercentage","inprogressByMonthPercentage","doneByMonthPercentage","columns","name","byDay","byMonth","ResponsiveContainer","height","BarChart","margin","top","right","left","bottom","barCategoryGap","barGap","barSize","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","stroke","vertical","XAxis","dataKey","tickSize","tickMargin","axisLine","YAxis","domain","position","tickLine","tickCount","Label","dy","Bar","radius","minPointSize","LabelList","content","SpinnerStyled","Spinner","strokeColor","strokeWidth","animationDuration","visible","day","Date","PeriodPag","type","useState","calendar","setCalendar","calendarRef","useRef","date","setDate","dispatch","useDispatch","useEffect","currentDate","moment","format","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","Box","sx","display","ref","backgroundColor","textAlign","color","mt","mb","pt","pb","borderRadius","Typography","lineHeight","textTransform","cursor","onClick","slice","length","DateCalendar","zIndex","onChange","today","$d","getTasksStatistics","justifyContent","marginBottom","xs","lg","LocalizationProvider","dateAdapter","AdapterDayjs","SectionStatistics","useSelector","selectTasksStatistics","style","size"],"sourceRoot":""}